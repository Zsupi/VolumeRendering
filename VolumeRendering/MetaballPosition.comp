#version 430
#extension GL_ARB_compute_shader : enable
#extension GL_ARB_shader_storage_buffer_object : enable

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;
//layout(local_size_x = 3, local_size_y = 3, local_size_z = 3) in;

layout(std430, binding = 1) buffer positionBuffer {
    vec4 position[];
};

layout(binding = 0, offset = 0) uniform atomic_uint counter; 

uniform sampler3D volumeData;
uniform vec3 volumeDimension = vec3(13.0f, 13.0f, 13.0f);

void main() {
    //setup texel coordinates
    vec3 texCoord = gl_GlobalInvocationID/ volumeDimension;
    
    float h = 0.0f;
    h = texture(volumeData, texCoord).r;

    if (h > 0.3f) {
        //relevant part of the volumeData was found
        vec4 metaball = vec4(texCoord, 1.0f);
        uint currentCounter = atomicCounterIncrement(counter);

        position[currentCounter] = metaball;
    }
}

// void main() {
//     vec3 metaball = gl_GlobalInvocationID; /// vec3(6.0f, 6.0f, 6.0f);
//     uint currentCounter = atomicCounterIncrement(counter);
//     position[currentCounter] = vec4(metaball, 1.0f);
// }